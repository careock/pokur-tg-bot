const TelegramBot = require('node-telegram-bot-api');
const token = "5788161727:AAG6yWHbuwMySGo9PPvbxVt0_EOfJfSGxNI";
const bot = new TelegramBot(token,{polling: true});
const axios = require ('axios');
const express = require("express");
const app2 = express();
const port = process.env.PORT || 3001;
app2.get("/", (req, res) => res.writeHead(200, {'Content-Type': 'text/plain'}));

app2.listen(port, () => console.log(`Example app listening on port ${port}!`));

//------------------------------------
const {initializeApp} = require ("firebase/app");
const {getDatabase, set, ref, get, child, push, update} = require ("firebase/database");

const firebaseConfig = {
  apiKey: "AIzaSyCP_MM8PwNuwIB29s3aAkKh1ai-QZ83aW0",
  authDomain: "pokur-bot.firebaseapp.com",
  projectId: "pokur-bot",
  storageBucket: "pokur-bot.appspot.com",
  messagingSenderId: "1059723331580",
  appId: "1:1059723331580:web:7b0973560984a74757d479",
  databaseURL: "https://pokur-bot-default-rtdb.firebaseio.com"
};
const app = initializeApp(firebaseConfig);


/*get(app)
.then (function(req,res){
        res.sendStatus(200);
});*/
  
//const db = getDatabase(app);
let db = getDatabase(app);
textWannaSmoke = "–•–æ—á–µ—à—å –ø–æ–∫—É—Ä?";
let chatIDs = {};
let chatIdsSize = 0;
const chats=ref(db, 'chats');
let msgOnCalltoSmoke = "–∑–æ–≤–µ—Ç –≤–∞—Å –Ω–∞ –ø–æ–∫—É—Ä!";
let textInstruction = "‚ùï–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç—ã, –≥–¥–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∫—É—Ä–∏–ª—å—â–∏–∫–∏. üîî –í–æ –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ —è –Ω–∞—Ö–æ–∂—É—Å—å, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –ø–æ–∫—É—Ä!‚úÖ"
//-------------------------------------

//–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤. –í –†–∞–±–í–µ—Ä—Å–∏–∏ - –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç ChatIds
async function updateChatIds(newChatId) {
    console.log('chatIds '+chatIDs);
    chatIdsSize=Object.keys(chatIDs).length;
    console.log(chatIdsSize);
    let isPovtor = false; 
    for (i=0; i<=chatIdsSize;i++) {
        if (chatIDs[i]==newChatId){
            isPovtor = true;
            break;
        }
    }
    if (isPovtor == false){
        chatIDs[chatIdsSize]=newChatId;
    }
    console.log("object (hopefully)"+chatIDs)
    await update(chats,chatIDs);
    console.log('updated');
}

    function getChats () {
        get(chats,'value')
            .then(function(snapshot) {
                chatIDs=snapshot.val();
                console.log( "snapshot.val   " + snapshot.val());
                console.log( "snapshot   " + snapshot);
                chatIdsSize=snapshot.val().length;
                console.log("size:   " + chatIdsSize);
        })
    }
    //getChats();

//–ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞--------------------------------------------------------------------------

const keyboard = [
    [
      {
        text: "üö¨ –•–æ—á—É –ø–æ–∫—É—Ä!", // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_data: 'wannaSmoke' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
      }
    ],
  ];
  const keyboard2 = [
    [
        {
            text: 'üü¢ –°–∏–≥–∏ –µ—Å—Ç—å!',
            callback_data: 'haveCig'
        },
        {
            text: 'üî¥ –°–∏–≥ –Ω–µ—Ç',
            callback_data: 'haveNoCig'
        }
    ],
  ];
  const keyboard3 = [
    [
        {
            text: "üî´ –ú–æ–≥—É —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å",
            callback_data: "canGive"

        },
        {
            text: "üê≠ –£ –º–µ–Ω—è –ø–æ—Å–ª–µ–¥–Ω—è—è",
            callback_data: "canNotGive"

        }
    ],
  ];
  const keyboard4 = [
    [
        {
            text: "üôç‚Äç‚ôÇÔ∏è –•–æ—á—É —Å–∏–≥—É",
            callback_data: "wannaBumCig"

        },
        {
            text: "üë®‚Äç‚ù§Ô∏è‚Äçüë® –•–æ—á—É –¥—É–¥–∫—É",
            callback_data: "wannaBumDudka"

        }
    ],
  ];
  const keyboard5 = [
    [
        {
            text: "üì£ –ó–≤–∞—Ç—å –Ω–∞ –ø–æ–∫—É—Ä!",
            callback_data: "callToSmoke"

        }
    ],
  ];
  const keyboard6 = [
    [
        {
            text: "–•–æ—á—É –µ—â–µ –ø–æ–∫—É—Ä.",
            callback_data: "wannaSmoke"

        }
    ],
  ];

    bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    text = msg.text; 
    if (text === "/start" || text === "–•–æ—á—É –ø–æ–∫—É—Ä!" || text === "—Ö–æ—á—É –ø–æ–∫—É—Ä" 
    || text === "–ø–æ–∫—É—Ä" || text === "–ü–æ–∫—É—Ä" || text === "—Ö–æ—á—É –ø–æ–∫—É—Ä!" ) {
        bot.sendMessage(chatId, textInstruction, { 
        });
        bot.sendMessage(chatId, textWannaSmoke, { 
            reply_markup: {
                inline_keyboard: keyboard,
            }
        });
    }
    else if(msg.new_chat_member) {
        bot.sendMessage (chatId, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–∑–≤–∞–ª–∏! –ß–µ—Ä–µ–∑ –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –∑–≤–∞—Ç—å –Ω–∞ –ø–æ–∫—É—Ä –≤—Å–µ—Ö, –∫—Ç–æ –º–µ–Ω—è –ø–æ–ª—å–∑—É–µ—Ç.", {
        })
        get(chats,'value')
            .then(function(snapshot) {
                let chatIDsUPD={};
                chatIDs=snapshot.val();
                console.log( "snapshot.val   " + snapshot.val());
                console.log( "snapshot   " + snapshot);
                //chatIdsSize=Object.keys(snapshot).length;
                chatIdsSize=snapshot.val().length;
                console.log("size:   " + chatIdsSize);
    let isPovtor = false; 
    for (i=0; i<chatIdsSize;i++) {
        //console.log(snapshot.val());
        console.log(chatIDs[i]);
        chatIDsUPD[i]=chatIDs[i];
        console.log(chatIDsUPD);
        console.log(i);
        if (chatIDsUPD[i]==chatId){
            isPovtor = true;
            console.log(isPovtor);
            break;
        }
        else {
            chatIDsUPD[i+1]=chatId;
            update(chats,chatIDsUPD);
            console.log('updated');
        }
    }
    /*if (isPovtor == false){
        chatIDs[chatIdsSize]=chatId;
    }*/
    //console.log(chatIDsUPD);
    //update(chats,chatIDs);

        })
        
    }
    else{
            console.log(msg);
            bot.sendMessage (chatId, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≥–Ω–∏–¥–∞. –ì–æ–≤–æ—Ä–∏ –ø–æ–Ω—è—Ç–Ω–µ–µ");
    }
  });
  

    bot.on('callback_query', msg => {
    const fromUsername = msg.from.username;
    const chatId = msg.message.chat.id;
    const data = msg.data;


    if (data === 'wannaSmoke') { 
        bot.sendMessage (chatId, "–ï—Å—Ç—å —á—Ç–æ –ø–æ–∫—É—Ä–∏—Ç—å?", {
        reply_markup: {
            inline_keyboard: keyboard2
        }
       })
    };

    if (data === 'haveCig') { 
        bot.sendMessage (chatId, "–°—Ç—Ä–µ–ª—å–Ω–µ—à—å, –µ—Å–ª–∏ —á—Ç–æ?", {
         reply_markup: {
             inline_keyboard: keyboard3
         }
        })
     };
     if (data === 'canGive') { 
        bot.sendMessage (chatId, "–í–Ω–∞—Ç—É—Ä–µ —Ç—ã –∫–∞–±–∞–Ω. –ó–æ–≤–µ–º –≤—Å–µ—Ö –Ω–∞ –ø–æ–∫—É—Ä?", {
         reply_markup: {
             inline_keyboard: keyboard5
         }
        })
        msgOnCalltoSmoke = "–∑–æ–≤–µ—Ç –≤–∞—Å –Ω–∞ –ø–æ–∫—É—Ä –∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —Å—Ç—Ä–µ–ª—å–Ω–µ—Ç —Å–∏–≥—É, –µ—Å–ª–∏ –Ω–∞–¥–æ! ü¶Åüí™";
     };
     if (data === 'canNotGive') { 
        bot.sendMessage (chatId, "–û–∫. –ó–æ–≤–µ–º –≤—Å–µ—Ö –Ω–∞ –ø–æ–∫—É—Ä?", {
         reply_markup: {
             inline_keyboard: keyboard5
         }
        })
        msgOnCalltoSmoke = "–∑–æ–≤–µ—Ç –≤–∞—Å –Ω–∞ –ø–æ–∫—É—Ä, –Ω–æ —Å–∏–≥—É –Ω–µ —Å—Ç—Ä–µ–ª—å–Ω–µ—Ç. üê≠üñï";
     };
     if (data === 'haveNoCig') { 
        bot.sendMessage (chatId, "–ù–µ –≤–æ–ø—Ä–æ—Å, –±—Ä–æ", {
         reply_markup: {
             inline_keyboard: keyboard4
         }
        })
        
     };
     if (data === 'wannaBumCig') { 
        bot.sendMessage (chatId, "–¢—ã —Ö–æ—á–µ—à—å —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å —Å–∏–≥—É. –ó–æ–≤–µ–º –≤—Å–µ—Ö –Ω–∞ –ø–æ–∫—É—Ä?", {
         reply_markup: {
             inline_keyboard: keyboard5
         }
        })
        msgOnCalltoSmoke = "–∑–æ–≤–µ—Ç –≤–∞—Å –Ω–∞ –ø–æ–∫—É—Ä, –∏ –ø—Ä–æ—Å–∏—Ç —Å—Ç—Ä–µ–ª—å–Ω—É—å —Å–∏–≥—É! üôèü•∫";
     };
     if (data === 'wannaBumDudka') { 
        bot.sendMessage (chatId, "–¢—ã —Ö–æ—á–µ—à—å –ø–æ–∫—É—Ä–∏—Ç—å —á—É–∂—É—é –¥—É–¥–∫—É. –ó–æ–≤–µ–º –≤—Å–µ—Ö –Ω–∞ –ø–æ–∫—É—Ä?", {
         reply_markup: {
             inline_keyboard: keyboard5
         }
        })
        msgOnCalltoSmoke = "–∑–æ–≤–µ—Ç –≤–∞—Å –Ω–∞ –ø–æ–∫—É—Ä, –∏ –ø—Ä–æ—Å–∏—Ç –¥–∞—Ç—å –ø–æ—Å–æ—Å–∞—Ç—å –¥—É–¥–∫—É. üëåüèªüëàüèø";
     };

    if (data === 'callToSmoke') { 
        bot.sendMessage (chatId, "–í—ã –ø–æ–∑–≤–∞–ª–∏ –≤—Å–µ—Ö –Ω–∞ –ø–æ–∫—É—Ä. –ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ! üö¨", {
        })
        bot.sendMessage (chatId, "–•–æ—á–µ—à—å –ø–æ–∫—É—Ä?", {
            reply_markup: {
                inline_keyboard: keyboard
            }
        })
       console.log(chatIdsSize);
       getChats();
        for (i=0;i<chatIdsSize;i++) {
            bot.sendMessage (chatIDs[i], "üì£ @" + fromUsername + " "+msgOnCalltoSmoke, {
            })
            console.log('chatIds '+chatIDs);
        }
     }
    }
    );